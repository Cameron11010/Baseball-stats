import numpy as np
import matplotlib.pyplot as plt
from collections import Counter
from openpyxl import load_workbook, Workbook

dataset = load_workbook(filename="//Users/cam/Documents/Python-projects/stats.xlsx")

file_path = "//Users/cam/Documents/Python-projects/stats_norm.xlsx"

train = dataset['Train']

test = dataset['Test']

headings = [train.cell(row=1, column=i).value for i in range(1, train.max_column + 1)]

test_headings = [test.cell(row=1, column=i).value for i in range(1, test.max_column + 1)]


def sheet_exists(file_path, sheet_name):
    try:
        workbook = load_workbook(filename=file_path)
        return sheet_name in workbook.sheetnames
    except FileNotFoundError:
        return False


def copy_sheet(source_sheet_name, target_sheet_name, target_file_path):
    try:
        # Load the existing workbook
        target_workbook = load_workbook(filename=target_file_path)
    except FileNotFoundError:
        # If the file doesn't exist, create a new workbook
        target_workbook = Workbook()

    # Create the target sheet
    if target_sheet_name in target_workbook.sheetnames:
        # If the sheet already exists, remove it
        target_workbook.remove(target_workbook[target_sheet_name])
    target_sheet = target_workbook.create_sheet(title=target_sheet_name)

    # Load the source sheet
    source_sheet = dataset[source_sheet_name]

    # Copy contents from source to target sheet
    for row in source_sheet.iter_rows(values_only=True):
        target_sheet.append(row)

    # Save the workbook
    target_workbook.save(filename=target_file_path)


import numpy as np


def normalise(sheet):
    data = []
    for row in sheet.iter_rows(min_row=2, values_only=True):  # Assuming the first row contains headers
        if not all(val is None for val in row):  # Skip over rows with all null values
            data.append(list(row))

    # Specify columns for normalization
    columns_to_normalize = [(7, 12), (14, 19), (21, 26), (28, 33), (35, 40), (42, 47), (49, 54), (56, 61), (63, 68)]

    # Apply z-score normalization to specified columns
    for start, end in columns_to_normalize:
        # Extract column values
        column_values = [row_data[start - 1:end] for row_data in data]
        column_values = [val for sublist in column_values for val in sublist if
                         val is not None]  # Flatten and remove None values

        if column_values:  # Skip if all values are None
            mean_val = np.mean(column_values)
            std_dev = np.std(column_values)

            for row_data in data:
                for i in range(start - 1, end):
                    if row_data[i] is not None:  # Skip over null values
                        row_data[i] = (row_data[i] - mean_val) / std_dev

    return data


sheet_name = "Norm_Train"
if not sheet_exists(file_path, sheet_name):
    source_sheet_name = "Train"
    target_sheet_name = "Norm_Train"
    copy_sheet(source_sheet_name, target_sheet_name, file_path)
norm_workbook = load_workbook(filename=file_path)
norm_sheet = norm_workbook[sheet_name]
norm_data = normalise(norm_sheet)

for row_idx, row_data in enumerate(norm_data, start=2):
    for col_idx, value in enumerate(row_data, start=1):
        norm_sheet.cell(row=row_idx, column=col_idx, value=value)

norm_workbook.save(filename=file_path)


sheet_name = "Norm_Test"
if not sheet_exists(file_path, sheet_name):
    source_sheet_name = "Test"
    target_sheet_name = "Norm_Test"
    copy_sheet(source_sheet_name, target_sheet_name, file_path)
norm_workbook = load_workbook(filename=file_path)
norm_sheet = norm_workbook[sheet_name]
norm_data = normalise(norm_sheet)

for row_idx, row_data in enumerate(norm_data, start=2):
    for col_idx, value in enumerate(row_data, start=1):
        norm_sheet.cell(row=row_idx, column=col_idx, value=value)

# Save the workbook with normalized data
norm_workbook.save(filename=file_path)

norm_dataset = load_workbook(filename="//Users/cam/Documents/Python-projects/stats_norm.xlsx")

train = norm_dataset['Norm_Train']
test = norm_dataset['Norm_Test']

pitch_ranges = {
    "fseam": ([7, 12]),
    "slider": (14, 19),
    "changeup": (21, 26),
    "curve": (28, 33),
    "sinker": (35, 40),
    "cutter": (42, 47),
    "splitter": (49, 54),
    "knuckle": (56, 61),
    "tseam": (63, 68),
}

results = {}

for pitch, pitch_range in pitch_ranges.items():
    results[pitch] = []
    for i in range(2, train.max_row + 1):
        row_data = []
        for j in range(pitch_range[0], pitch_range[1] + 1):
            cell_value = train.cell(row=i, column=j).value
            if cell_value is not None or cell_value == 0:
                row_data.append(cell_value)
        if row_data:  # Only append non-empty rows
            results[pitch].append(row_data)


fseam = results["fseam"]
slider = results["slider"]
changeup = results["changeup"]
curve = results["curve"]
sinker = results["sinker"]
cutter = results["cutter"]
splitter = results["splitter"]
knuckle = results["knuckle"]
tseam = results["tseam"]

points = {'4-seam fastball': fseam,
          'sinker': sinker,
          'cutter': cutter,
          '2-seam fastball': tseam,
          'splitter': splitter,
          'changeup': changeup,
          'slider': slider,
          'curve': curve,
          'knuckle': knuckle,
          }


color_map = {
    '4-seam fastball': '#de2a33',
    'sinker': '#ffff33',
    'cutter': '#e8208e',
    '2-seam fastball': '#ffad00',
    'splitter': '#f3ffe3',
    'changeup': '#008080',
    'slider': '#86d8f7',
    'curve': '#b19cd9',
    'knuckle': '#98FF98'
}


#Calculating the nearest neighbour as long as there data has 6 features
def euclidean_distance(p, q):
    if len(p) != len(q):
        raise ValueError("Both points must have the same number of features. P length:", len(p), "Q length: ", len(q))
    else:
        return np.sqrt(np.sum((np.array(p) - np.array(q)) ** 2))


class KNearestNeighbours:
    def __init__(self, k=15):
        self.k = k
        self.points = None

    def fit(self, points):
        self.points = points

    def predict(self, new_point, unknown_pitch_number):
        distances = []
        k = self.k
        for category, point_list in self.points.items():
            for point in point_list:
                try:
                    distance = euclidean_distance(point, new_point)
                    distances.append([distance, category, point])
                except ValueError as e:
                    print(f"Error: {e}")
                    print(f"Category: {category}")
                    print(f"Point: {point}")
                    print(f"New Point: {new_point}")
        categories = [category[1] for category in sorted(distances)[:self.k]]
        result = Counter(categories).most_common(1)[0][0]

        distances.sort()
        for distance, category, neighbour in distances[:k]:
            print(f"Distance: {distance}, Category: {category}, Point: {neighbour}")
            nearest_neighbours = [neighbour for _, category, neighbour in distances[:k]]

        # VISUALISATION
        ax = plt.figure().add_subplot(111, projection='3d')
        ax.grid(True, color="#323232")
        ax.set_facecolor("black")
        ax.figure.set_facecolor("#121212")
        ax.tick_params(axis="x", colors="white")
        ax.tick_params(axis="y", colors="white")
        ax.tick_params(axis="z", colors="white")

        ax.scatter(new_point[0], new_point[1], new_point[4], color=color_map.get(result), marker="*", s=500,
                   zorder=150)

        for distance, category, neighbour in distances[:k]:
            ax.scatter(neighbour[0], neighbour[1], neighbour[4], color=color_map.get(category), marker="o", s=100,
                       zorder=100)

            ax.plot([new_point[0], neighbour[0]], [new_point[1], neighbour[1]], zs=[new_point[4], neighbour[4]],
                    color='red', linestyle="--", linewidth=1)

        ax.set_xlabel('Velocity', color='white')
        ax.set_ylabel('Spinrate', color='white')
        ax.set_zlabel('Break', color='white')
        plt.title(('KNN Nearest Neighbours Pitch Type Results', f"Unknown Pitch {unknown_pitch_number}"), color='white')
        for category, color in color_map.items():
            ax.scatter([], [], [], c=color, label=category)

        ax.legend(fontsize=5, title='Categories', loc='upper right')

        return result





def pitch_classification(column_numbers):


    if column_numbers == [7, 8, 9, 10, 11, 12]:
        return "4-seam fastball"
    elif column_numbers == [14, 15, 16, 17, 18, 19]:
        return "slider"
    if column_numbers == [21, 22, 23, 24, 25, 26]:
        return "changeup"
    if column_numbers == [28, 29, 30, 31, 32, 33]:
        return "curve"
    if column_numbers == [35, 36, 37, 38, 39, 40]:
        return "sinker"
    if column_numbers == [42, 43, 44, 45, 46, 47]:
        return "cutter"
    if column_numbers == [49, 50, 51, 52, 53, 54]:
        return "splitter"
    if column_numbers == [56, 57, 58, 59, 60, 61]:
        return "knuckle"
    if column_numbers == [63, 64, 65, 66, 67, 68]:
        return "2-seam fastball"
    else:
        return "Unknown pitch type"


ranges = [(7, 12), (14, 19), (21, 26), (28, 33), (35, 40), (42, 47), (49, 54), (56, 61), (63, 68)]
unknown_pitch = []

for start, end in ranges:
    for j in range(2, test.max_row + 1):
        column_values = []  # Reset column_values for each row
        for start, end in ranges:
            for i in range(start, end + 1):
                cell_value = test.cell(row=j, column=i).value
                if cell_value is not None or cell_value == 0:
                    column_values.append((cell_value, i))
        if column_values:
            unknown_pitch.extend(column_values)

clf = KNearestNeighbours()
clf.fit(points)

total_predictions = 0
correct_predictions = 0

# Separate each new unknown pitch into variables for each set of 6 features
num_variables = len(unknown_pitch) // (6 * len(ranges))
print("unknown P len ", (len(unknown_pitch) / 6), "\nranges len:", len(ranges), "\nnum variable", num_variables)

for i in range(num_variables):
    globals()[f'unknown_pitch {i + 1}'] = unknown_pitch[i * 6: (i + 1) * 6]

true_pos_fourseam = 0
true_neg_fourseam = 0
false_pos_fourseam = 0
false_neg_fourseam = 0

true_pos_slider = 0
true_neg_slider = 0
false_pos_slider = 0
false_neg_slider = 0

true_pos_changeup = 0
true_neg_changeup = 0
false_pos_changeup = 0
false_neg_changeup = 0

true_pos_curve = 0
true_neg_curve = 0
false_pos_curve = 0
false_neg_curve = 0

true_pos_sinker = 0
true_neg_sinker = 0
false_pos_sinker = 0
false_neg_sinker = 0

true_pos_cutter = 0
true_neg_cutter = 0
false_pos_cutter = 0
false_neg_cutter = 0

true_pos_splitter = 0
true_neg_splitter = 0
false_pos_splitter = 0
false_neg_splitter = 0

true_pos_knuckle = 0
true_neg_knuckle = 0
false_pos_knuckle = 0
false_neg_knuckle = 0

true_pos_twoseam = 0
true_neg_twoseam = 0
false_pos_twoseam = 0
false_neg_twoseam = 0

# Print the variables
for i in range(num_variables):
    print(f'unknown_pitch {i + 1}: {globals()[f"unknown_pitch {i + 1}"]}')
    guess_pitch = [tup[0] for tup in globals()[f"unknown_pitch {i + 1}"]]
    guess_pitch_types = [test_headings[tup[1] - 7] for tup in globals()[f"unknown_pitch {i + 1}"]]
    guess_pitch_column_numbers = [tup[1] for tup in globals()[f"unknown_pitch {i + 1}"]]

    correct_pitch = pitch_classification(guess_pitch_column_numbers)
    prediction = clf.predict(guess_pitch, i + 1)

    print("Category prediction:", prediction)
    print("Correct pitch:", correct_pitch)

    if prediction == "4-seam fastball" and correct_pitch == "4-seam fastball":
        true_pos_fourseam += 1
    if prediction == "4-seam fastball" and correct_pitch != "4-seam fastball":
        false_pos_fourseam += 1
    if prediction != "4-seam fastball" and correct_pitch == "4-seam fastball":
        false_neg_fourseam += 1
    if prediction != "4-seam fastball" and correct_pitch != "4-seam fastball":
        true_neg_fourseam += 1

    if prediction == "slider" and correct_pitch == "slider":
        true_pos_slider += 1
    if prediction == "slider" and correct_pitch != "slider":
        false_pos_slider += 1
    if prediction != "slider" and correct_pitch == "slider":
        false_neg_slider += 1
    if prediction != "slider" and correct_pitch != "slider":
        true_neg_slider += 1

    if prediction == "changeup" and correct_pitch == "changeup":
        true_pos_changeup += 1
    if prediction == "changeup" and correct_pitch != "changeup":
        false_pos_changeup += 1
    if prediction != "changeup" and correct_pitch == "changeup":
        false_neg_changeup += 1
    if prediction != "changeup" and correct_pitch != "changeup":
        true_neg_changeup += 1

    if prediction == "curve" and correct_pitch == "curve":
        true_pos_curve += 1
    if prediction == "curve" and correct_pitch != "curve":
        false_pos_curve += 1
    if prediction != "curve" and correct_pitch == "curve":
        false_neg_curve += 1
    if prediction != "curve" and correct_pitch != "curve":
        true_neg_curve += 1

    if prediction == "sinker" and correct_pitch == "sinker":
        true_pos_sinker += 1
    if prediction == "sinker" and correct_pitch != "sinker":
        false_pos_sinker += 1
    if prediction != "sinker" and correct_pitch == "sinker":
        false_neg_sinker += 1
    if prediction != "sinker" and correct_pitch != "sinker":
        true_neg_sinker += 1

    if prediction == "cutter" and correct_pitch == "cutter":
        true_pos_cutter += 1
    if prediction == "cutter" and correct_pitch != "cutter":
        false_pos_cutter += 1
    if prediction != "cutter" and correct_pitch == "cutter":
        false_neg_cutter += 1
    if prediction != "cutter" and correct_pitch != "cutter":
        true_neg_cutter += 1

    if prediction == "splitter" and correct_pitch == "splitter":
        true_pos_splitter += 1
    if prediction == "splitter" and correct_pitch != "splitter":
        false_pos_splitter += 1
    if prediction != "splitter" and correct_pitch == "splitter":
        false_neg_splitter += 1
    if prediction != "splitter" and correct_pitch != "splitter":
        true_neg_splitter += 1

    if prediction == "knuckle" and correct_pitch == "knuckle":
        true_pos_knuckle += 1
    if prediction == "knuckle" and correct_pitch != "knuckle":
        false_pos_knuckle += 1
    if prediction != "knuckle" and correct_pitch == "knuckle":
        false_neg_knuckle += 1
    if prediction != "knuckle" and correct_pitch != "knuckle":
        true_neg_knuckle += 1

    if prediction == "2-seam fastball" and correct_pitch == "2-seam fastball":
        true_pos_twoseam += 1
    if prediction == "2-seam fastball" and correct_pitch != "2-seam fastball":
        false_pos_twoseam += 1
    if prediction != "2-seam fastball" and correct_pitch == "2-seam fastball":
        false_neg_twoseam += 1
    if prediction != "2-seam fastball" and correct_pitch != "2-seam fastball":
        true_neg_twoseam += 1


    if prediction == correct_pitch:
        correct_predictions += 1
    else:
        correct_predictions = correct_predictions
        #plt.show()

    total_predictions += 1

print("\n4-seam fastballs: \ntrue pos: ", true_pos_fourseam, " true neg: ", true_neg_fourseam)
print("false pos: ", false_pos_fourseam, " false neg: ", false_neg_fourseam)

print("\nSliders: \ntrue pos: ", true_pos_slider, " true neg: ", true_neg_slider)
print("false pos: ", false_pos_slider, " false neg: ", false_neg_slider)

print("\nChangeups: \ntrue pos: ", true_pos_changeup, " true neg: ", true_neg_changeup)
print("false pos: ", false_pos_changeup, " false neg: ", false_neg_changeup)

print("\nCurves: \ntrue pos: ", true_pos_curve, " true neg: ", true_neg_curve)
print("false pos: ", false_pos_curve, " false neg: ", false_neg_curve)

print("\nSinkers: \ntrue pos: ", true_pos_sinker, " true neg: ", true_neg_sinker)
print("false pos: ", false_pos_sinker, " false neg: ", false_neg_sinker)

print("\nCutters: \ntrue pos: ", true_pos_cutter, " true neg: ", true_neg_cutter)
print("false pos: ", false_pos_cutter, " false neg: ", false_neg_cutter)

print("\nSplitters: \ntrue pos: ", true_pos_splitter, " true neg: ", true_neg_splitter)
print("false pos: ", false_pos_splitter, " false neg: ", false_neg_splitter)

print("\nKnuckles: \ntrue pos: ", true_pos_knuckle, " true neg: ", true_neg_knuckle)
print("false pos: ", false_pos_knuckle, " false neg: ", false_neg_knuckle)

print("\n2-seam fastballs: \ntrue pos: ", true_pos_twoseam, " true neg: ", true_neg_twoseam)
print("false pos: ", false_pos_twoseam, " false neg", false_neg_twoseam)

accuracy = (correct_predictions / total_predictions) * 100

print("\nCorrect count: ", correct_predictions)
print("Total count: ", total_predictions)

print("Accuracy = ", accuracy)
